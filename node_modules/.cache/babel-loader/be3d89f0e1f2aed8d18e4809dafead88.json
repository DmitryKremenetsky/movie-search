{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport default function useMoviesList(searchQuery, page) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isFetching, setIsFetching] = useState(false);\n  const [totalPages, setTotalPages] = useState(0);\n  useEffect(() => {\n    if (searchQuery.trim().length < 3) {\n      return setMovies([]);\n    }\n    ;\n    setMovies([]);\n    setIsFetching(true);\n    setTotalPages(0);\n    fetch(`https://www.omdbapi.com/?&apikey=35def29d&s=${searchQuery}&page=${page}`).then(res => res.json()).then(_ref => {\n      let {\n        Response,\n        Search,\n        totalResults\n      } = _ref;\n      setMovies(Response === 'True' ? Search : []);\n      setTotalPages(Response === 'True' ? Math.round(totalResults / 10) : 0);\n    }).catch(err => {\n      console.log(err);\n      setMovies([]);\n      setTotalPages(0);\n    }).finally(() => setIsFetching(false));\n  }, [searchQuery, page]);\n  return {\n    movies,\n    totalPages,\n    isFetching,\n    setMovies\n  };\n}\n_s(useMoviesList, \"mrcF7ZOgAaYsjJzkdSm1cGabOfk=\");","map":{"version":3,"names":["useState","useEffect","useMoviesList","searchQuery","page","_s","movies","setMovies","isFetching","setIsFetching","totalPages","setTotalPages","trim","length","fetch","then","res","json","_ref","Response","Search","totalResults","Math","round","catch","err","console","log","finally"],"sources":["/Users/kirya_ko/Documents/GitHub/movie-search-1/src/hooks/useMoviesList.js"],"sourcesContent":["import { useState , useEffect } from 'react';\n\nexport default function useMoviesList(searchQuery, page) {\n  const [movies, setMovies] = useState([]);\n  const [isFetching, setIsFetching] = useState(false);\n  const [totalPages, setTotalPages] = useState(0);\n\n  useEffect(() => {\n    if (searchQuery.trim().length < 3) {\n      return setMovies([]);\n    };\n\n    setMovies([]);\n    setIsFetching(true);\n    setTotalPages(0);\n\n    fetch(`https://www.omdbapi.com/?&apikey=35def29d&s=${searchQuery}&page=${page}`)\n      .then((res) => res.json())\n      .then(({ Response, Search, totalResults }) => {\n        setMovies(Response === 'True' ? Search : []);\n        setTotalPages(Response === 'True' ? Math.round(totalResults / 10) : 0);\n      })\n      .catch((err) => {\n        console.log(err);\n        setMovies([]);\n        setTotalPages(0);\n      })\n      .finally(() => setIsFetching(false));\n  }, [searchQuery, page]);\n\n  return {\n    movies,\n    totalPages,\n    isFetching,\n    setMovies,\n  }\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAGC,SAAS,QAAQ,OAAO;AAE5C,eAAe,SAASC,aAAaA,CAACC,WAAW,EAAEC,IAAI,EAAE;EAAAC,EAAA;EACvD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd,IAAIE,WAAW,CAACS,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;MACjC,OAAON,SAAS,CAAC,EAAE,CAAC;IACtB;IAAC;IAEDA,SAAS,CAAC,EAAE,CAAC;IACbE,aAAa,CAAC,IAAI,CAAC;IACnBE,aAAa,CAAC,CAAC,CAAC;IAEhBG,KAAK,CAAE,+CAA8CX,WAAY,SAAQC,IAAK,EAAC,CAAC,CAC7EW,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAACG,IAAA,IAAwC;MAAA,IAAvC;QAAEC,QAAQ;QAAEC,MAAM;QAAEC;MAAa,CAAC,GAAAH,IAAA;MACvCX,SAAS,CAACY,QAAQ,KAAK,MAAM,GAAGC,MAAM,GAAG,EAAE,CAAC;MAC5CT,aAAa,CAACQ,QAAQ,KAAK,MAAM,GAAGG,IAAI,CAACC,KAAK,CAACF,YAAY,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IACxE,CAAC,CAAC,CACDG,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBlB,SAAS,CAAC,EAAE,CAAC;MACbI,aAAa,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CACDiB,OAAO,CAAC,MAAMnB,aAAa,CAAC,KAAK,CAAC,CAAC;EACxC,CAAC,EAAE,CAACN,WAAW,EAAEC,IAAI,CAAC,CAAC;EAEvB,OAAO;IACLE,MAAM;IACNI,UAAU;IACVF,UAAU;IACVD;EACF,CAAC;AACH;AAACF,EAAA,CAlCuBH,aAAa"},"metadata":{},"sourceType":"module"}